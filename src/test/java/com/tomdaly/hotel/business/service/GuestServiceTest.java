package com.tomdaly.hotel.business.service;

import com.tomdaly.hotel.data.entity.Guest;
import com.tomdaly.hotel.data.repository.GuestRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import static com.tomdaly.TestUtils.createMockGuest;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.mockito.BDDMockito.given;

@RunWith(SpringJUnit4ClassRunner.class)
public class GuestServiceTest {

  @MockBean private GuestRepository guestRepository;
  private GuestService guestService;

  @Before
  public void before() {
    guestService = new GuestService(guestRepository);
  }

  @Test
  public void testAddGuest_shouldReturnNewGuestWithCorrectDetails() {
    Guest mockGuest = createMockGuest();
    mockGuest.setId(
        0); // in production ID is auto generated by DB, but is zero without DB integration
    assertThat(
        guestService.addGuest(
            "Foo", "Bar", "foo@bar.com", "42 Wallaby Way", "Australia", "Sydney", "1234567890"),
        is(equalTo(mockGuest)));
  }

  @Test
  public void testAddGuest_shouldReturnExistingGuestIfGuestExists() {
    Guest mockGuest = createMockGuest();
    given(guestRepository.findByFirstNameAndLastNameIgnoreCase("Foo", "Bar")).willReturn(mockGuest);
    assertThat(
        guestService.addGuest(
            "Foo", "Bar", "foo@bar.com", "42 Wallaby Way", "Australia", "Sydney", "1234567890"),
        is(equalTo(mockGuest)));
  }

  @Test
  public void testFindGuest_shouldReturnCorrectGuest() {
    Guest mockGuest = createMockGuest();
    given(guestRepository.findByFirstNameAndLastNameIgnoreCase("Foo", "Bar")).willReturn(mockGuest);

    assertThat(guestService.findGuest("Foo", "Bar"), is(equalTo(mockGuest)));
  }

  @Test
  public void testDeleteGuest_shouldFailWithNonexistentGuest() {
    given(guestRepository.findByFirstNameAndLastNameIgnoreCase("Foo", "Bar"))
        .willReturn(new Guest());
    assertThat(guestService.deleteGuest("Foo", "Bar"), is("Guest not found"));
  }

  @Test
  public void testDeleteGuest_shouldPassWithExistingGuest() {
    Guest mockGuest = createMockGuest();
    given(guestRepository.findByFirstNameAndLastNameIgnoreCase("Foo", "Bar")).willReturn(mockGuest);
    assertThat(guestService.deleteGuest("Foo", "Bar"), is("Guest 'Foo Bar' deleted"));
  }
}
